(defun isInsurance (iid)
   (not (null (member iid *Insurance_Data*)))
)

(defun checkManager (cid)
   (get cid 'mid)
)

(defun checkCost (iid)
   (get iid 'cost)
)

(defun calCost (cost)
   (defparameter *sumCost* (+ *sumCost* cost))
)

(defun cliIsIns (iid)
   (cond 
      ((not (equal (member iid *Insurance_Data*) nil))
         (getIns iid)
      )
   )
)

(defun regEmp(eid email ename ephone eage)
   (setf (get eid 'mail) email)
   (setf (get eid 'name) ename)
   (setf (get eid 'phone) ephone)
   (setf (get eid 'age) eage)
   (cond 
      ((null (member eid *Employee_Data*)) (defparameter *Employee_Data* (cons eid *Employee_Data*)) "Registered")
      (T "Updated")
   )
)

(defun regIns(iid iname cost)
   (setf (get iid 'name) iname)
   (setf (get iid 'cost) cost)
   (cond 
      ((null (member iid *Insurance_Data*)) (defparameter *Insurance_Data* (cons iid *Insurance_Data*)) "Registered")
      (T "Updated")
   )
)

(defun regCli(cid mid cmail cname cphone cage i_list)
   (cond 
      ((and (not (null (member mid *Employee_Data*))) (null (member nil (mapcar 'isInsurance i_list))))
         (setf (get cid 'mid) mid)
         (setf (get cid 'mail) cmail)
         (setf (get cid 'name) cname)
         (setf (get cid 'phone) cphone)
         (setf (get cid 'age) cage)
         (setf (get cid 'i_list) i_list)
         (cond 
            ((null (member cid *Client_Data*)) (defparameter *Client_Data* (cons cid *Client_Data*)) "Registered")
            (T "Updated")
         )
      )
      (T "Manager or Insurance for client does not exist")
   )
)

(defun getEmp(eid)
   (cond
      ((not(equal (member eid *Employee_Data*) nil))
         (princ "--------------------\nEmployee Information\n--------------------\n")
         (princ "Employee id:       ")
         (print eid)   
         (princ "Employee name:     ")
         (print (get eid 'name))
         (princ "Employee phone#:   ")
         (print (get eid 'phone))
         (princ "Employee age:      ")
         (print (get eid 'age))
         "--------------------"

      )
      (T "Employee does not exist")
   )
)


(defun getIns(iid)
   (cond
      ((not(equal (member iid *Insurance_Data*) nil))
         (princ "---------------------\nInsurance Information\n---------------------\n")
         (princ "Insurance id:       ")
         (print iid)   
         (princ "insurance name:     ")
         (print (get iid 'name))
         (princ "insurance cost:     ")
         (print (get iid 'cost))
         "---------------------"
      )
      (T "Insurance does not exist")
   )   
)

(defun getCli(cid)
   (cond
      ((not(equal (member cid *Client_Data*) nil))
         (princ "------------------\nClient Information\n------------------\n")
         (princ "Client id:     ")
         (print cid)
         (princ "Mangager id:   ")
         (print (get cid 'mid))
         (princ "Client mail:   ")
         (print (get cid 'mail))
         (princ "Client name:   ")
         (print (get cid 'name))   
         (princ "Client phone#: ")
         (print (get cid 'phone))
         (princ "Client age:    ")
         (print (get cid 'age))
         (princ "Insurance list:")
         (print (get cid 'i_list))
         "------------------"
      )
      (T "Client does not exist")
   )   
)

(defun getDatabase(type id)
   (cond
      ((equal type "employee")
         (getEmp id)
      )
      ((equal type "insurance")
         (getIns id)
      )
      ((equal type "client")
         (getCli id)
      )
      (T "Type does not exist")
   )
)

(defun delCli(cid)
   (cond 
      ((equal (member cid *Client_Data*) nil) "Client does not exist")
      (T (setf *Client_Data* (remove cid *Client_Data*)) "Successfully deleted")
   )
)

(defun delEmp(eid)
   (setq flag 0)
   (cond 
      ((equal (member eid *Employee_Data*) nil) "Employee does not exist")
      (T 
         (cond
            ((not(member eid (mapcar 'checkManager *Client_Data*)))
            (setq flag 1))
         )
         (cond
            ((equal flag 1)
               (setf *Employee_Data* (remove eid *Employee_Data*)) 
               "Successfully deleted"
            )
            (T "Delete failed, Employee manage any Clients")
         )
      )
   )
)


(defun cliSearch(cid)
   (cond
      ((not(equal (member cid *Client_Data*) nil))
         (princ "-----------------------\nClient's Insurance List\n-----------------------\n")
         (mapcar 'cliIsIns (get cid 'i_list))
         "-----------------------"
      )
      (T "Client does not exist")
   )
)

(defun cliCost(cid)
   (defparameter *sumCost* 0)
   (cond
      ((not(equal (member cid *Client_Data*) nil))
	 (princ "-----------------------\nClient's Insurance Cost\n-----------------------\n")
         (mapcar 'calCost (mapcar 'checkCost (get cid 'i_list)))
	 (print *sumCost*)
	 "-----------------------"
      )
      (T "Client does not exist")
   )
)

(defun readDatabase(filename)
   (princ "\nLoading database...\n")
   (setq f (open filename :direction :input))   
   (dotimes(i (read f) (return "finish"))
         (regEmp (read f) (read f) (read f) (read f) (read f))
   )
   (dotimes(i (read f) (return "finish"))
         (regIns (read f) (read f) (read f))
   )
   (dotimes(i (read f) (return "finish"))
         (regCli (read f) (read f) (read f) (read f) (read f) (read f) (read f))
   )
   (close f)
   (princ "Loading complete!\n")
)

(defun saveDatabase(filename)
   (princ "\nSaving database...\n")
	(setq f (open filename :direction :output))
	(setq num_emp (length *Employee_Data*))
	(setq num_ins (length *Insurance_Data*))
	(setq num_cli (length *Client_Data*))
	(print num_emp f)
	(dolist(a *Employee_Data*)
		(princ a f)
		(princ " " f)
		(princ (get a 'mail) f)
		(princ " " f)
		(princ (get a 'name) f)
		(princ " " f)
		(princ (get a 'phone) f)
		(princ " " f)
		(print (get a 'age) f)
	)
	(print num_ins f)
	(dolist(a *Insurance_Data*)
		(princ  a f)
		(princ " " f)
		(princ (get a 'name) f) 
		(princ " " f)
		(print (get a 'cost) f)
	)
	(print num_cli f)
	(dolist(a *Client_Data*)
		(princ a f)
		(princ " " f)
		(princ (get a 'mid) f)
		(princ " " f)
		(princ (get a 'mail) f)
		(princ " " f)
		(princ (get a 'name) f)
		(princ " " f)
		(princ (get a 'phone) f)
		(princ " " f)
		(princ (get a 'age) f)
		(princ " " f)
		(print (get a 'i_list) f)
	)	
	(close f)
   (princ "Saving complete!\n")
)

(defun init()
   
   (readDatabase "database.txt")
   (princ "---------------------------------------------\n")
   (princ "Insurance company database management program\n")
   (princ "---------------------------------------------\n")


)

(defparameter *Client_Data* nil)
(defparameter *Employee_Data* nil)
(defparameter *Insurance_Data* nil)

(init)
